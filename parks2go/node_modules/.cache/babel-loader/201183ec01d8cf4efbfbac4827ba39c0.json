{"ast":null,"code":"import _classCallCheck from\"/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/node_modules/@babel/runtime/helpers/esm/inherits\";// JavaScript Document\nimport React from'react';import Inprogress from'../components/progress_indicator/inProgress';//Material UI\nimport GridList from'@material-ui/core/GridList';import Grid from'@material-ui/core/Grid';import GridListTile from'@material-ui/core/GridListTile';import GridListTileBar from'@material-ui/core/GridListTileBar';var stCode=window.location.pathname;//console.log(stCode)//testing: /parks2go/stateParks/TX/7CE6E935-F839-4FEC-A63E-052B1DEF39D2\nvar newStC=stCode.split('/');//console.log(newStC) //testing: [\"\", \"parks2go\", \"stateParks\", \"TX\", \"7CE6E935-F839-4FEC-A63E-052B1DEF39D2\"]\nvar actCd=newStC.pop();//console.log(actCd) //testing: 7CE6E935-F839-4FEC-A63E-052B1DEF39D2\nvar stateCd=newStC.slice(3,4);//console.log(stateCd) //testing: [\"TX\"]\nvar activityId=actCd;var targetId=stateCd;var endpoint=\"statecode=\".concat(targetId);//Smart Component\nvar StateParks=/*#__PURE__*/function(_React$Component){_inherits(StateParks,_React$Component);var _super=_createSuper(StateParks);function StateParks(){var _this;_classCallCheck(this,StateParks);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={picListing:[],isLoading:false};return _this;}_createClass(StateParks,[{key:\"parkClick\",value:function parkClick(event){window.onclick=function(event){//console.log(event.target);\nvar parkId=event.target.id;window.location.assign(\"https://jenplaza.github.io/parks2go/park/\".concat(parkId));};}//calling fetchData function\n},{key:\"componentDidMount\",value:function componentDidMount(){this.fetchData();}},{key:\"filterByActivity\",value:function filterByActivity(current_value,i){for(var _i=0;_i<current_value.activities.length;_i++){var activity=current_value.activities[_i];if(activity.id===\"\".concat(activityId))return true;}return false;}//fetching API\n},{key:\"fetchData\",value:function fetchData(){var _this2=this;this.setState({isLoading:true},function(){fetch(\"https://developer.nps.gov/api/v1/parks?\".concat(endpoint,\"&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq\")).then(function(results){return results.json();}).then(function(data){_this2.setState({isLoading:false,data:data.data});var filteredArray=data.data.filter(_this2.filterByActivity);var mList=filteredArray.map(function(use,i){return/*#__PURE__*/React.createElement(GridList,{key:i,style:styles.gridList},/*#__PURE__*/React.createElement(GridListTile,{style:styles.paper},/*#__PURE__*/React.createElement(\"img\",{id:use.parkCode,src:use.images[0].url,alt:use.images[0].altText,onClick:_this2.parkClick}),/*#__PURE__*/React.createElement(GridListTileBar,{title:use.images[0].title,subtitle:/*#__PURE__*/React.createElement(\"span\",null,use.addresses[0].city,\", \",use.addresses[0].stateCode)})));});_this2.setState({StateParks:mList});});});}},{key:\"render\",value:function render(){var isLoading=this.state.isLoading;if(isLoading){return/*#__PURE__*/React.createElement(Inprogress,null);}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Grid,{container:true,style:styles.container},this.state.StateParks));}}]);return StateParks;}(React.Component);export default StateParks;var styles={container:{justifyContent:'center'},gridList:{padding:'0.1%'},paper:{width:'428px',height:'328px',listStyleType:'none',backgroundColor:'white'}};","map":{"version":3,"sources":["/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/src/pages/stateParks.js"],"names":["React","Inprogress","GridList","Grid","GridListTile","GridListTileBar","stCode","window","location","pathname","newStC","split","actCd","pop","stateCd","slice","activityId","targetId","endpoint","StateParks","state","picListing","isLoading","event","onclick","parkId","target","id","assign","fetchData","current_value","i","activities","length","activity","setState","fetch","then","results","json","data","filteredArray","filter","filterByActivity","mList","map","use","styles","gridList","paper","parkCode","images","url","altText","parkClick","title","addresses","city","stateCode","container","Component","justifyContent","padding","width","height","listStyleType","backgroundColor"],"mappings":"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","sourcesContent":["// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../components/progress_indicator/inProgress';\n\n//Material UI\nimport GridList from '@material-ui/core/GridList';\nimport Grid from '@material-ui/core/Grid';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nlet stCode = window.location.pathname;\n//console.log(stCode)//testing: /parks2go/stateParks/TX/7CE6E935-F839-4FEC-A63E-052B1DEF39D2\nlet newStC = stCode.split('/');\n//console.log(newStC) //testing: [\"\", \"parks2go\", \"stateParks\", \"TX\", \"7CE6E935-F839-4FEC-A63E-052B1DEF39D2\"]\nvar actCd = newStC.pop();\n//console.log(actCd) //testing: 7CE6E935-F839-4FEC-A63E-052B1DEF39D2\n\nvar stateCd = newStC.slice(3, 4);\n//console.log(stateCd) //testing: [\"TX\"]\nconst activityId = actCd;\nconst targetId = stateCd;\nconst endpoint = `statecode=${targetId}`;\n\n//Smart Component\nclass StateParks extends React.Component {\n  //declaring state and new object\n  state = {\n    picListing: [],\n    isLoading: false,\n  };\n\n  parkClick(event) {\n    window.onclick = (event) => {\n      //console.log(event.target);\n\n      var parkId = event.target.id;\n      window.location.assign(\n        `https://jenplaza.github.io/parks2go/park/${parkId}`\n      );\n    };\n  }\n\n  //calling fetchData function\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  filterByActivity(current_value, i) {\n    for (let i = 0; i < current_value.activities.length; i++) {\n      let activity = current_value.activities[i];\n      if (activity.id === `${activityId}`) return true;\n    }\n    return false;\n  }\n\n  //fetching API\n  fetchData() {\n    this.setState({ isLoading: true }, () => {\n      fetch(\n        `https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`\n      )\n        .then((results) => {\n          return results.json();\n        })\n        .then((data) => {\n          this.setState({\n            isLoading: false,\n            data: data.data,\n          });\n\n          let filteredArray = data.data.filter(this.filterByActivity);\n\n          let mList = filteredArray.map((use, i) => {\n            return (\n              <GridList key={i} style={styles.gridList}>\n                <GridListTile style={styles.paper}>\n                  <img\n                    id={use.parkCode}\n                    src={use.images[0].url}\n                    alt={use.images[0].altText}\n                    onClick={this.parkClick}\n                  />\n                  <GridListTileBar\n                    title={use.images[0].title}\n                    subtitle={\n                      <span>\n                        {use.addresses[0].city}, {use.addresses[0].stateCode}\n                      </span>\n                    }\n                  />\n                </GridListTile>\n              </GridList>\n            );\n          });\n          this.setState({ StateParks: mList });\n        });\n    });\n  }\n  render() {\n    const { isLoading } = this.state;\n    if (isLoading) {\n      return <Inprogress />;\n    }\n\n    return (\n      <div>\n        <Grid container style={styles.container}>\n          {this.state.StateParks}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default StateParks;\n\nconst styles = {\n  container: {\n    justifyContent: 'center',\n  },\n  gridList: {\n    padding: '0.1%',\n  },\n  paper: {\n    width: '428px',\n    height: '328px',\n    listStyleType: 'none',\n    backgroundColor: 'white',\n  },\n};\n"]},"metadata":{},"sourceType":"module"}