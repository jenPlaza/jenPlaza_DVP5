{"ast":null,"code":"var _jsxFileName = \"/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/src/components/grids/parkGridStateActivities.js\";\n// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../progress_indicator/inProgress';\n\n//Material UI\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nlet sCode = window.location.pathname;\nlet newSC = sCode.split('/stateActivities/');\nnewSC.shift();\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}&limit=2`;\n\n//Smart Component\nclass ParkGridStateActivities extends React.Component {\n  constructor(...args) {\n    super(...args);\n    //declaring state and new object\n    this.state = {\n      parkArray: [],\n      isLoading: false\n    };\n  }\n  parkClick(event) {\n    window.onclick = event => {\n      //console.log(event.target);\n\n      var parkId = event.target.id;\n      window.location.assign(`https://jenplaza.github.io/parks2go/park/${parkId}`);\n    };\n  }\n\n  //calling fetchData function\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  //fetching API\n  fetchData() {\n    this.setState({\n      isLoading: true\n    }, () => {\n      fetch(`https://developer.nps.gov/api/v1/parks?\t${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`).then(results => {\n        return results.json();\n      }).then(data => {\n        this.setState({\n          isLoading: false,\n          data: data.data\n        });\n      });\n    });\n  }\n  render() {\n    const {\n      data,\n      isLoading\n    } = this.state;\n    //console.log(isLoading)//testing:true\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(Inprogress, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 20\n        }\n      });\n    }\n    let newArray = data;\n    /*console.log(newArray)*/ //testing: newArray = data\n\n    if (newArray != null) {\n      return /*#__PURE__*/React.createElement(GridList, {\n        cellHeight: 450,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }\n      }, newArray.map((use, i) => /*#__PURE__*/React.createElement(GridListTile, {\n        key: i,\n        cols: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        key: use.images[0].id,\n        id: use.parkCode,\n        src: use.images[0].url,\n        alt: use.images[0].altText,\n        onClick: this.parkClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(GridListTileBar, {\n        title: use.images[0].title,\n        subtitle: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 64\n          }\n        }, use.addresses[0].city, \", \", use.addresses[0].stateCode),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }))));\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 6\n      }\n    }, this.state.ParkGridStateActivities);\n  }\n}\nexport default ParkGridStateActivities;","map":{"version":3,"names":["React","Inprogress","GridList","GridListTile","GridListTileBar","sCode","window","location","pathname","newSC","split","shift","targetId","endpoint","ParkGridStateActivities","Component","constructor","args","state","parkArray","isLoading","parkClick","event","onclick","parkId","target","id","assign","componentDidMount","fetchData","setState","fetch","then","results","json","data","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","newArray","cellHeight","map","use","i","key","cols","images","parkCode","src","url","alt","altText","onClick","title","subtitle","addresses","city","stateCode"],"sources":["/Users/jenplaza/jpDocs/PROJECTS/Projects/schoolProjects/parks2go/parks2go/src/components/grids/parkGridStateActivities.js"],"sourcesContent":["// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../progress_indicator/inProgress'\n\n//Material UI\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\n let sCode = window.location.pathname;\n let newSC = sCode.split('/stateActivities/');\n newSC.shift();\n\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}&limit=2`;\n\n\n//Smart Component\nclass ParkGridStateActivities extends React.Component {\n\t//declaring state and new object\n\tstate ={\n\t\tparkArray: [],\n\t\tisLoading: false,\n\t}\n\nparkClick(event) {\n\twindow.onclick= event => {\n\t\t//console.log(event.target);\n\t\t\n\t\tvar parkId = event.target.id;\n\t\twindow.location.assign(`https://jenplaza.github.io/parks2go/park/${parkId}`);\n\t};\n} \n\n//calling fetchData function\n\tcomponentDidMount(){\n\tthis.fetchData();\n}\n\n//fetching API\nfetchData(){\n\t\t\tthis.setState({ isLoading: true }, () => {\n\t\t\t\tfetch(`https://developer.nps.gov/api/v1/parks?\t${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`)\n\t\t\t\t.then(results =>{\n\t\t\t\treturn results.json();\n\t\t\t\t}).then(data => {this.setState({\n\t\t\t\tisLoading:false,\n\t\t\t\tdata:data.data\n\t\t\t})\n\t\t})\n\t})\n}\t\t   \n\t render() { \n\t\t const { data, isLoading } = this.state; \n\t\t \t//console.log(isLoading)//testing:true\n\t\t\t\n\t\t if(isLoading){\n            return <Inprogress />\n          }\n\t\t\t\n\t\t\tlet newArray = data;\n\t\t\t /*console.log(newArray)*///testing: newArray = data\n\t\t\t \n\t\t\tif (newArray != null) {\n        \t\treturn (\n            \t\t <GridList cellHeight={450} >\n                \t\t{newArray.map((use, i) =>\n\t\t\t\t\t\t\t<GridListTile key={i} cols={1} >\n\t\t\t\t\t\t\t\t<img key={use.images[0].id} id={use.parkCode} src={use.images[0].url} alt={use.images[0].altText}  onClick={this.parkClick}/>\n\t\t\t\t\t\t\t\t<GridListTileBar title={use.images[0].title} subtitle={<span>{use.addresses[0].city}, {use.addresses[0].stateCode}</span>} />\n\t\t\t\t\t\n\t\t\t\t\t\t\t</GridListTile>\t\n\t\t\t\t\t\t\t)}\n            \t\t</GridList>\n        \t\t);\n    \t\t}\n  \t\treturn (\n \t\t\t\t<div>\n\t  \t\t\t\t{this.state.ParkGridStateActivities}\t\n    \t\t\t</div>\n  \t\t\t\t);\n \t\t\t}\n\t\t}\n\t\texport default ParkGridStateActivities"],"mappings":"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"},"metadata":{},"sourceType":"module"}