{"ast":null,"code":"var _jsxFileName = \"/Users/jenplaza/Documents/SHARE/schoolProjects/jenPlaza_DVP5/parks2go/src/components/grids/parkGridStateParks.js\";\n// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../progress_indicator/inProgress'; //Material UI\n\nimport { withStyles } from '@material-ui/styles';\nimport GridList from '@material-ui/core/GridList';\nimport Grid from '@material-ui/core/Grid';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nconst styles = theme => ({\n  root: {//direction:'column',\n    //flexGrow:1,\n    //margin:'1%',\n  },\n  container: {//display: 'block',\n    //flexWrap: 'wrap',\n    //justifyContent: 'space-around',\n    //overflow: 'hidden',\n  },\n  gridList: {//paddingBottom:'0.2%',\n  },\n  paper: {//textAlign: 'center',\n    //width:'200px',\n    //height: '200px',\n    //listStyleType:'none',\n    //backgroundColor:'white',\n  },\n  indImgs: {\n    height: '100%',\n    width: '100%'\n  }\n});\n\nlet sCode = window.location.pathname;\nlet newSC = sCode.split('/stateActivities/');\nnewSC.shift();\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}&limit=2`; //Smart Component\n\nclass ParkGridStateParks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      parkArray: [],\n      isLoading: false\n    };\n  }\n\n  parkClick(event) {\n    window.onclick = event => {\n      //console.log(event.target);\n      var parkId = event.target.id;\n      window.location.assign(`http://localhost:3000/park/${parkId}`);\n    };\n  } //calling fetchData function\n\n\n  componentDidMount() {\n    this.fetchData();\n  } //fetching API\n\n\n  fetchData(props) {\n    const {\n      classes\n    } = this.props;\n    this.setState({\n      isLoading: true\n    }, () => {\n      fetch(`https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`).then(results => {\n        return results.json();\n      }).then(data => {\n        this.setState({\n          isLoading: false,\n          data: data.data\n        });\n        console.log('data', data);\n      }); //console.log(data)\n      //console.log(\"state\", this.state.data)\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      data,\n      isLoading\n    } = this.state;\n    console.log(isLoading);\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(Inprogress, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let newArray = data;\n    console.log(newArray);\n\n    if (newArray != null) {\n      return /*#__PURE__*/React.createElement(GridList, {\n        ClassName: classes.gridList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 16\n        }\n      }, newArray.map(use => /*#__PURE__*/React.createElement(GridListTile, {\n        ClassName: classes.paper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 8\n        }\n      }, \"//\", console.log(use), /*#__PURE__*/React.createElement(\"img\", {\n        key: use.images[0].id,\n        id: use.parkCode,\n        src: use.images[0].url,\n        alt: use.images[0].altText,\n        ClassName: classes.indImgs,\n        onClick: this.parkClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(GridListTileBar, {\n        title: use.images[0].title,\n        subtitle: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 64\n          }\n        }, use.addresses[0].city, \", \", use.addresses[0].stateCode),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ClassName: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      ClassName: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, this.state.ParkGridStateParks));\n  }\n\n}\n\nexport default withStyles(styles)(ParkGridStateParks);","map":{"version":3,"sources":["/Users/jenplaza/Documents/SHARE/schoolProjects/jenPlaza_DVP5/parks2go/src/components/grids/parkGridStateParks.js"],"names":["React","Inprogress","withStyles","GridList","Grid","GridListTile","GridListTileBar","styles","theme","root","container","gridList","paper","indImgs","height","width","sCode","window","location","pathname","newSC","split","shift","targetId","endpoint","ParkGridStateParks","Component","state","parkArray","isLoading","parkClick","event","onclick","parkId","target","id","assign","componentDidMount","fetchData","props","classes","setState","fetch","then","results","json","data","console","log","render","newArray","map","use","images","parkCode","url","altText","title","addresses","city","stateCode"],"mappings":"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","sourcesContent":["// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../progress_indicator/inProgress'\n\n//Material UI\nimport {withStyles} from '@material-ui/styles';\nimport GridList from '@material-ui/core/GridList';\nimport Grid from '@material-ui/core/Grid';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nconst styles = theme => ({\nroot:{\n\t//direction:'column',\n\t//flexGrow:1,\n\t//margin:'1%',\n\t},\ncontainer:{\n    //display: 'block',\n\t //flexWrap: 'wrap',\n\t//justifyContent: 'space-around',\n\t//overflow: 'hidden',\n\t},\ngridList: {\n\t//paddingBottom:'0.2%',\n  },\npaper: { \n    //textAlign: 'center',\n\t\t//width:'200px',\n\t\t//height: '200px',\n\t\t//listStyleType:'none',\n\t//backgroundColor:'white',\n  },\nindImgs:{\n\theight: '100%',\n\twidth:'100%',\n\t},\n});\n\n\n let sCode = window.location.pathname;\n let newSC = sCode.split('/stateActivities/');\n newSC.shift();\n\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}&limit=2`;\n\n\n//Smart Component\nclass ParkGridStateParks extends React.Component {\n\t//declaring state and new object\n\tstate ={\n\t\tparkArray: [],\n\t\tisLoading: false,\n\t}\n\nparkClick(event) {\n\twindow.onclick= event => {\n\t\t//console.log(event.target);\n\t\t\n\t\tvar parkId = event.target.id;\n\t\twindow.location.assign(`http://localhost:3000/park/${parkId}`);\n\t};\n} \n\n//calling fetchData function\n\tcomponentDidMount(){\n\tthis.fetchData();\n}\n\n//fetching API\nfetchData(props){\n\t const { classes } = this.props;\n\tthis.setState({ isLoading: true }, () => {\n\t\t\n\tfetch(`https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`)\n\t\t.then(results =>{\n\t\treturn results.json();\n\t}).then(data => {this.setState({\n\t\t isLoading:false,\n\t\tdata:data.data\n\t\t})\n\t\t\t\t\t \n\t\t\t\t\t console.log('data',data)\n\t\t\t\t\t})\n\t\t//console.log(data)\n\t\t//console.log(\"state\", this.state.data)\n\t})\n}\t\t   \n\t render() { \n\t\t const { classes } = this.props;\n\t\t const { data, isLoading } = this.state; \n\t\t \tconsole.log(isLoading)\n\t\t\t\n\t\t if(isLoading){\n            return <Inprogress />\n          }\n\t\t\t\n\t\t\tlet newArray = data;\n\t\t\t console.log(newArray)\n\t\t\t \n\t\t\tif (newArray != null) {\n        \t\treturn (\n            \t\t <GridList  ClassName={classes.gridList}>\n                \t\t{newArray.map((use =>\n\t\t\t\t\t \n\t\t\t\t\t\t\t<GridListTile ClassName={classes.paper}>\n\t\t\t\t\t\t\t\t//{console.log(use)}\n\t\t\t\t\t\t\t\t<img key={use.images[0].id} id={use.parkCode} src={use.images[0].url} alt={use.images[0].altText} ClassName={classes.indImgs} onClick={this.parkClick}/>\n\t\t\t\t\t\t\t\t<GridListTileBar title={use.images[0].title} subtitle={<span>{use.addresses[0].city}, {use.addresses[0].stateCode}</span>} />\n\t\t\t\t\t\n\t\t\t\t\t\t\t</GridListTile>\t\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n            \t\t</GridList>\n        \t\t);\n    }\n  return (\n <div ClassName={classes.root}>\n      <Grid container ClassName={classes.container}>\n\t  \t\t{this.state.ParkGridStateParks}\t\n     </Grid>\n    </div>\n  );\n }\n}\nexport default withStyles(styles)(ParkGridStateParks);\n\n"]},"metadata":{},"sourceType":"module"}