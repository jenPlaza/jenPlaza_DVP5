{"ast":null,"code":"var _jsxFileName = \"/Users/jenplaza/Documents/SHARE/schoolProjects/jenPlaza_DVP5/parks2go/src/pages/stateParks.js\";\n// JavaScript Document\nimport React from 'react'; //Material UI\n\nimport { makeStyles } from '@material-ui/styles';\nimport GridList from '@material-ui/core/GridList';\nimport Grid from '@material-ui/core/Grid';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar'; //console.log(window.location.pathname);\n\nlet sCode = window.location.pathname;\nlet newSC = sCode.split('/stateParks/');\nnewSC.shift();\nconst parkId = newSC;\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}`; //Smart Component\n\nclass StateParks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      picArray: []\n    };\n  }\n\n  parkClick(event) {\n    window.onclick = event => {\n      //console.log(event.target);\n      var parkId = event.target.id;\n      window.location.assign(`http://localhost:3000/park/${parkId}`);\n    };\n  } //calling fetchData function\n\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  filterByActivity(current_value, i) {\n    for (let i = 0; i < current_value.activities.length; i++) {\n      let activity = current_value.activities[i];\n      if (activity.id === '7CE6E935-F839-4FEC-A63E-052B1DEF39D2') return true;\n    } //console.log(current_value);\n\n\n    return false;\n  } //fetching API\n\n  /*fetchData(){\n   \n  fetch(`https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`)\n  \t.then(results =>{\n  \treturn results.json();\n  }).then(data =>{\n  \t\n  \tlet filteredArray = data.data.filter(this.filterByActivity);\n  \t\n  \tlet mList = filteredArray.map((use, i)=>\n  \t{\n  \t\treturn(\n  \t\t\t<GridList key={i} style={styles.gridList}>\n  \t\t\t<GridListTile style={styles.paper}>\n  \t\t\t<img id={use.parkCode} src={use.images[0].url} alt={use.images[0].altText} style={styles.indImgs} onClick={this.parkClick}/>\n  \t\t\t<GridListTileBar title={use.images[0].title} subtitle={<span>{use.addresses[0].city}, {use.addresses[0].stateCode}</span>} />\n  \t\t\t</GridListTile>\t\n  \t\t\t</GridList>\n  \t\t)\n  \t})\n  \t\n  \tthis.setState({StateParks:mList});\n  })\n  }\n  */\n  //fetch Api data and map json results in a list format\n\n\n  fetchData() {\n    fetch(`https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`).then(results => {\n      return results.json();\n    }).then(data => {\n      data.data.forEach((use, i) => {\n        this.setState({\n          picArray: data.data[i].images\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      picArray,\n      i\n    } = this.state;\n    console.log(picArray);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, picArray[0].url));\n  }\n\n}\n\nexport default StateParks;\nconst styles = {\n  root: {\n    direction: 'row',\n    flexGrow: '1'\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden'\n  },\n  gridList: {\n    paddingBottom: '0.2%'\n  },\n  paper: {\n    textAlign: 'center',\n    width: '400px',\n    height: '300px',\n    backgroundColor: 'rgb(15,15,15,0.4)',\n    listStyleType: 'none',\n    backgroundColor: 'white'\n  },\n  indImgs: {\n    height: '100%',\n    width: '100%'\n  }\n};","map":{"version":3,"sources":["/Users/jenplaza/Documents/SHARE/schoolProjects/jenPlaza_DVP5/parks2go/src/pages/stateParks.js"],"names":["React","makeStyles","GridList","Grid","GridListTile","GridListTileBar","sCode","window","location","pathname","newSC","split","shift","parkId","targetId","endpoint","StateParks","Component","state","picArray","parkClick","event","onclick","target","id","assign","componentDidMount","fetchData","filterByActivity","current_value","i","activities","length","activity","fetch","then","results","json","data","forEach","use","setState","images","render","console","log","styles","root","container","url","direction","flexGrow","display","flexWrap","justifyContent","overflow","gridList","paddingBottom","paper","textAlign","width","height","backgroundColor","listStyleType","indImgs"],"mappings":"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","sourcesContent":["// JavaScript Document\nimport React from 'react';\n\n//Material UI\nimport {makeStyles} from '@material-ui/styles';\nimport GridList from '@material-ui/core/GridList';\nimport Grid from '@material-ui/core/Grid';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\n//console.log(window.location.pathname);\nlet sCode = window.location.pathname;\n let newSC = sCode.split('/stateParks/');\n newSC.shift();\nconst parkId = newSC;\n\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}`;\n\n//Smart Component\nclass StateParks extends React.Component {\n\t//declaring state and new object\n\tstate ={\n\t\tpicArray: []\n\t}\n\nparkClick(event) {\n\twindow.onclick= event => {\n\t\t//console.log(event.target);\n\t\t\n\t\tvar parkId = event.target.id;\n\t\twindow.location.assign(`http://localhost:3000/park/${parkId}`);\n\t};\n} \n\n//calling fetchData function\n\tcomponentDidMount(){\n\tthis.fetchData();\n}\n\nfilterByActivity(current_value, i){\n\t\t\t\n\t\t\tfor(let i=0; i< current_value.activities.length;i++ ) {\n\t\t\t\tlet activity = current_value.activities[i];\n\t\t\t\tif(activity.id ==='7CE6E935-F839-4FEC-A63E-052B1DEF39D2')\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t//console.log(current_value);\n\t\treturn false;\n}\n\n//fetching API\n /*fetchData(){\n\t \n\tfetch(`https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`)\n\t\t.then(results =>{\n\t\treturn results.json();\n\t}).then(data =>{\n\t\t\n\t\tlet filteredArray = data.data.filter(this.filterByActivity);\n\t\t\n\t\tlet mList = filteredArray.map((use, i)=>\n\t\t{\n\t\t\treturn(\n\t\t\t\t<GridList key={i} style={styles.gridList}>\n\t\t\t\t<GridListTile style={styles.paper}>\n\t\t\t\t<img id={use.parkCode} src={use.images[0].url} alt={use.images[0].altText} style={styles.indImgs} onClick={this.parkClick}/>\n\t\t\t\t<GridListTileBar title={use.images[0].title} subtitle={<span>{use.addresses[0].city}, {use.addresses[0].stateCode}</span>} />\n\t\t\t\t</GridListTile>\t\n\t\t\t\t</GridList>\n\t\t\t)\n\t\t})\n\t\t\n\t\tthis.setState({StateParks:mList});\n\t})\n}\n*/\t \n\n//fetch Api data and map json results in a list format\n\tfetchData(){\n\t\tfetch(`https://developer.nps.gov/api/v1/parks?${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`)\n\t\t\t.then(results =>{return results.json();}\n\t\t).then(data =>{data.data.forEach((use, i)=>{\t\n\t\t\tthis.setState({picArray:data.data[i].images})\n\n\t\t\t})\n\t\t})\n\t}\n\n\n\nrender() { \n\tconst {picArray, i} = this.state\n\tconsole.log(picArray)\n  return (\n\t  <div style={styles.root}>\n      <Grid container style={styles.container}>\n\t  \t\t{picArray[0].url}\n     </Grid>\n    </div>\n  );\n }\n}\nexport default StateParks\n\nconst styles ={\nroot:{\n\tdirection:'row',\n\tflexGrow:'1',\n\t},\ncontainer:{\n    display: 'flex',\n\t flexWrap: 'wrap',\n\tjustifyContent: 'space-around',\n\toverflow: 'hidden',\n\t},\ngridList: {\n\tpaddingBottom:'0.2%',\n  },\npaper: { \n    textAlign: 'center',\n\t\twidth:'400px',\n\t\theight: '300px',\n\t\tbackgroundColor: 'rgb(15,15,15,0.4)',\n\t\tlistStyleType:'none',\n\t\tbackgroundColor:'white',\n  },\nindImgs:{\n\theight: '100%',\n\twidth:'100%',\n\t},\n}"]},"metadata":{},"sourceType":"module"}