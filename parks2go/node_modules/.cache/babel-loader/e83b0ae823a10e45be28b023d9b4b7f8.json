{"ast":null,"code":"var _jsxFileName = \"/Users/jenplaza/Documents/SHARE/schoolProjects/jenPlaza_DVP5/parks2go/src/components/grids/parkGridStateActivities.js\";\n// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../progress_indicator/inProgress'; //Material UI\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nlet sCode = window.location.pathname;\nlet newSC = sCode.split('/stateActivities/');\nnewSC.shift();\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}&limit=2`; //Smart Component\n\nclass ParkGridStateActivities extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      parkArray: [],\n      isLoading: false\n    };\n  }\n\n  parkClick(event) {\n    window.onclick = event => {\n      //console.log(event.target);\n      var parkId = event.target.id;\n      window.location.assign(`http://localhost:3000/park/${parkId}`);\n    };\n  } //calling fetchData function\n\n\n  componentDidMount() {\n    this.fetchData();\n  } //fetching API\n\n\n  fetchData() {\n    this.setState({\n      isLoading: true\n    }, () => {\n      fetch(`https://developer.nps.gov/api/v1/parks?\t${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`).then(results => {\n        return results.json();\n      }).then(data => {\n        this.setState({\n          isLoading: false,\n          data: data.data\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      data,\n      isLoading\n    } = this.state; //const { data} = this.state; \n\n    /*//testing\n    console.log(isLoading)*/\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(Inprogress, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let newArray = data;\n    /*//testing\n    console.log(newArray)*/\n\n    if (newArray != null) {\n      return /*#__PURE__*/React.createElement(GridList, {\n        cellHeight: 450,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 16\n        }\n      }, newArray.map((use, i) => /*#__PURE__*/React.createElement(GridListTile, {\n        key: i,\n        cols: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        key: use.images[0].id,\n        id: use.parkCode,\n        src: use.images[0].url,\n        alt: use.images[0].altText,\n        onClick: this.parkClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(GridListTileBar, {\n        title: use.images[0].title,\n        subtitle: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 64\n          }\n        }, use.addresses[0].city, \", \", use.addresses[0].stateCode),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 6\n      }\n    }, this.state.ParkGridStateActivities);\n  }\n\n}\n\nexport default ParkGridStateActivities;","map":{"version":3,"sources":["/Users/jenplaza/Documents/SHARE/schoolProjects/jenPlaza_DVP5/parks2go/src/components/grids/parkGridStateActivities.js"],"names":["React","Inprogress","GridList","GridListTile","GridListTileBar","sCode","window","location","pathname","newSC","split","shift","targetId","endpoint","ParkGridStateActivities","Component","state","parkArray","isLoading","parkClick","event","onclick","parkId","target","id","assign","componentDidMount","fetchData","setState","fetch","then","results","json","data","render","newArray","map","use","i","images","parkCode","url","altText","title","addresses","city","stateCode"],"mappings":"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","sourcesContent":["// JavaScript Document\nimport React from 'react';\nimport Inprogress from '../progress_indicator/inProgress'\n\n//Material UI\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\n let sCode = window.location.pathname;\n let newSC = sCode.split('/stateActivities/');\n newSC.shift();\n\nconst targetId = newSC;\nconst endpoint = `statecode=${targetId}&limit=2`;\n\n\n//Smart Component\nclass ParkGridStateActivities extends React.Component {\n\t//declaring state and new object\n\tstate ={\n\t\tparkArray: [],\n\t\tisLoading: false,\n\t}\n\nparkClick(event) {\n\twindow.onclick= event => {\n\t\t//console.log(event.target);\n\t\t\n\t\tvar parkId = event.target.id;\n\t\twindow.location.assign(`http://localhost:3000/park/${parkId}`);\n\t};\n} \n\n//calling fetchData function\n\tcomponentDidMount(){\n\tthis.fetchData();\n}\n\n//fetching API\nfetchData(){\n\t\t\tthis.setState({ isLoading: true }, () => {\n\t\t\t\tfetch(`https://developer.nps.gov/api/v1/parks?\t${endpoint}&api_key=YpbDDtsNwQRi13JXZXiN7DnEIusWnKQLsCZW11xq`)\n\t\t\t\t.then(results =>{\n\t\t\t\treturn results.json();\n\t\t\t\t}).then(data => {this.setState({\n\t\t\t\tisLoading:false,\n\t\t\t\tdata:data.data\n\t\t\t})\n\t\t})\n\t})\n}\t\t   \n\t render() { \n\t\t const { data, isLoading } = this.state; \n\t\t //const { data} = this.state; \n\t\t \n\t\t \t/*//testing\n\t\t \tconsole.log(isLoading)*/\n\t\t\t\n\t\t if(isLoading){\n            return <Inprogress />\n          }\n\t\t\t\n\t\t\tlet newArray = data;\n\t\t\t /*//testing\n\t\t\t console.log(newArray)*/\n\t\t\t \n\t\t\tif (newArray != null) {\n        \t\treturn (\n            \t\t <GridList cellHeight={450} >\n                \t\t{newArray.map((use, i) =>\n\t\t\t\t\t\t\t<GridListTile key={i} cols={1} >\n\t\t\t\t\t\t\t\t<img key={use.images[0].id} id={use.parkCode} src={use.images[0].url} alt={use.images[0].altText}  onClick={this.parkClick}/>\n\t\t\t\t\t\t\t\t<GridListTileBar title={use.images[0].title} subtitle={<span>{use.addresses[0].city}, {use.addresses[0].stateCode}</span>} />\n\t\t\t\t\t\n\t\t\t\t\t\t\t</GridListTile>\t\n\t\t\t\t\t\t\t)}\n            \t\t</GridList>\n        \t\t);\n    \t\t}\n  \t\treturn (\n \t\t\t\t<div>\n\t  \t\t\t\t{this.state.ParkGridStateActivities}\t\n    \t\t\t</div>\n  \t\t\t\t);\n \t\t\t}\n\t\t}\n\t\texport default ParkGridStateActivities"]},"metadata":{},"sourceType":"module"}